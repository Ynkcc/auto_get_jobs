name: Nuitka Build and Release

on:
  push:
    # branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include_browser: [true, false]
        # exclude:
        #   # 当 include_browser=false 时，排除 playwright 的安装
        #   - include_browser: false
        #     os: windows-latest  # 可根据需要排除特定系统
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt

      - name: Install Dependencies
        shell: bash
        run: |
          pip install -r requirements.txt
          if ${{ matrix.include_browser }}; then 
          playwright install chromium
          fi

      - name: Patch paho-mqtt
        run: python src/ws_client/patch.py

      - name: Build Executable with Nuitka
        uses: Ynkcc/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: src/main.py
          mode: onefile
          mingw64: true
          playwright-include-browser: ${{ matrix.include_browser && 'chromium-1161' || 'none' }}

      - name: Prepare Resources
        shell: bash
        run: |
          set -x
          os_short=${{ matrix.os == 'ubuntu-latest' && 'ubuntu' || 'windows' }}
          dir_name="${os_short}${{ matrix.include_browser && '-chromium' || '' }}"
          mkdir -p "output/$dir_name"
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            mv build/main.bin "output/$dir_name/main"
          else
            mv build/main.exe "output/$dir_name/"
          fi
          mv data/resume_sample.png data/resume.png
          mv data/resume_for_ai_sample.md data/resume_for_ai.md 
          mv config/config_sample.yaml config/config.yaml
          cp -r config data "output/$dir_name/"
          
          echo "dir_name=${dir_name}" >> $GITHUB_OUTPUT
        id: package

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.dir_name }}
          path: output/${{ steps.package.outputs.dir_name }}

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare Release Files
        run: |
          find artifacts -mindepth 1 -maxdepth 1 -type d -exec zip -r {}.zip {} \;

      - name: Debug Artifacts
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 15
        with:
          limit-access-to-organization: true
          prompt: "🕵️ 检查原始构建产物 | 输入 'exit' 继续工作流"
          session-name: pre-package-debug

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated build for version ${{ github.ref_name }}
            - Includes Windows and Linux builds
            - Variants with/without Chromium browser
          files: artifacts/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
